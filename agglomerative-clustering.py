# -*- coding: utf-8 -*-
"""l4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DGsG-6EYgGdRdcu7ykwJjdV0dyRlt84k
"""

import numpy as np
import pandas as pd
from sklearn.cluster import AgglomerativeClustering
data=pd.read_csv('Mall_Customers.csv')
data.head()

x=np.array(data["Annual Income (k$)"])
y=np.array(data["Spending Score (1-100)"])
s = np.stack((x, y), axis=-1)
clustering = AgglomerativeClustering(n_clusters =2).fit(s)
print(clustering.labels_)

from scipy.cluster.hierarchy import dendrogram

def dist(x, y):
    return np.sqrt(np.sum(np.square(x - y)))

def single_linkage(distances, i, j):
    return np.min(distances[i], axis=0), j

# Define agglomerative clustering function
def agglomerative_clustering(data, k):
    n = len(data)
    distances = np.zeros((n, n))
    for i in range(n):
        for j in range(i+1, n):
            distances[i][j] = dist(data[i], data[j])
            distances[j][i] = distances[i][j]
    clusters = [[i] for i in range(n)]
    linkage = []
    while len(clusters) > k:
        min_distance = np.inf
        merge_indices = (0, 0)
        for i in range(len(clusters)):
            for j in range(i+1, len(clusters)):
                distance, _ = single_linkage(distances, i, j)
                if distance < min_distance:
                    min_distance = distance
                    merge_indices = (i, j)
        i, j = merge_indices
        new_cluster = clusters[i] + clusters[j]
        clusters.pop(j)
        clusters[i] = new_cluster
        linkage.append(merge_indices + (min_distance,))
    return linkage, clusters

k = 4
data = np.array(data)
linkage, clusters = agglomerative_clustering(data, k)

plt.figure(figsize=(10, 7))
for i, cluster in enumerate(clusters):
    plt.scatter(data[cluster][:,0], data[cluster][:,1], label=f'Cluster {i+1}')
plt.title('Agglomerative Clustering')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()
plt.show()